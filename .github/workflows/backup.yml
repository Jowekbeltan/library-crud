# .github/workflows/backup-api.yml
name: Supabase Backup via API
on:
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Create backup script
        run: |
          cat > backup.js << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_KEY
          );

          async function backupTable(tableName) {
            console.log(`Backing up table: ${tableName}`);
            
            let allData = [];
            let from = 0;
            const limit = 1000;
            let hasMore = true;

            while (hasMore) {
              const { data, error, count } = await supabase
                .from(tableName)
                .select('*', { count: 'exact' })
                .range(from, from + limit - 1);
              
              if (error) {
                throw new Error(`Error backing up ${tableName}: ${error.message}`);
              }
              
              if (data && data.length > 0) {
                allData = allData.concat(data);
                from += limit;
              } else {
                hasMore = false;
              }
              
              if (count && from >= count) {
                hasMore = false;
              }
            }
            
            return allData;
          }

          async function main() {
            try {
              console.log('Starting Supabase backup via API...');
              
              // Backup each table - ADD YOUR TABLE NAMES HERE
              const tables = ['books', 'users']; // Replace with your actual table names
              
              const backup = {
                timestamp: new Date().toISOString(),
                tables: {}
              };

              for (const table of tables) {
                backup.tables[table] = await backupTable(table);
                console.log(`‚úÖ ${table}: ${backup.tables[table].length} records`);
              }

              // Save backup file
              const filename = `supabase_backup_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
              fs.writeFileSync(filename, JSON.stringify(backup, null, 2));
              
              console.log(`‚úÖ Backup completed: ${filename}`);
              console.log(`Total records: ${Object.values(backup.tables).flat().length}`);
              
            } catch (error) {
              console.error('‚ùå Backup failed:', error.message);
              process.exit(1);
            }
          }

          main();
          EOF
          
      - name: Install dependencies and run backup
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          npm install @supabase/supabase-js
          node backup.js
          
      - name: Commit and push backup
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add *.json
          git commit -m "ü§ñ Supabase API backup $(date -u +%Y%m%d_%H%M%S)" || echo "No changes to commit"
          git push